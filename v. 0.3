<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<style>
pre {
	display: inline-block;
	margin: 0;
}

input.inputClass {
	font-size: 80%;
	width: 75px;
}

div.myclass {
	font-size: 80%;
	display: inline-block;
	width: 175px;
	text-align: right;
}

table.center {
	margin-left: auto;
	margin-right: auto;
}

textarea {
	font-size: 80%;
	}


</style>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>. </p>

		<input type="file" id="fileInput" onChange="uploadRequest()"/><br><br>
		<button onClick = "simplify()">Simplify</button><br>
		<br>WEED OUT STRUCTURES THIS FAR APART:
		<input id="precSimp"></input>(FT)
		<br><br>
		<div class="container1" id="container"></div>
		
</head>
<body>
	<center>
		<hr><br>
		<table class="center">
			<tr>
				<td>
					<center>
					<textarea id="xml-val">(your resultant XML data previewed here...)</textarea>
					<br>
					<input 	type="button" 
							id="dwn-btn-xml" 
							value="Download LandXML Result" 
							onClick="download('landXML.xml','xml-val')"/>
					</center>
				</td>
				<td>
					<center>
					<textarea id="csv-val">(your resultant CSV data previewed here...)</textarea>
					<br>
					<input 	type="button" 
							id="dwn-btn-csv" 
							value="Download CSV Result"
							onClick="download('landXML.csv','csv-val')"/>
					</center>
				</td>
			</tr>
		</table>
		<p id="demo"></p>
	</center>
<script>

	// Get file from fileInput, read it, and store it
	function uploadRequest(){
		var myFile = document.getElementById("fileInput").files[0];
		const reader = new FileReader();
		reader.onload = function fileReadCompleted() {
			parseXML(reader.result);
			mergeNodes(0); // I delete Null Structures... This fixes that dumb thing that i do... Only checks for sequentially similar structures
			}
		reader.readAsText(myFile);
		}

	// Get and parse DOM of XML file
	function parseXML(fileText){
		parser = new DOMParser();
		xmlDoc = parser.parseFromString(fileText,"text/xml");
		var s = new XMLSerializer();
		popFields(xmlDoc);
		displayCSV("CSV Output Coming Soon!");
		displayXML(s.serializeToString(xmlDoc));
		}

	// Find nodes that are too close together and merge them
	function mergeNodes(dist){
		var s = new XMLSerializer();
		var n = xmlDoc.getElementsByTagName("PipeNetwork");
		var nLen = n.length;
		var tot =0;
		for (var i = 0; i <nLen; i++){ // Loop thru Pipe Networks
			//console.log(n[i].attributes.getNamedItem("name").nodeValue);
			if (n[i].getElementsByTagName("Struct").length<2) {alert("SHORT"); continue;}
			if (n[i].nodeType == 1) {  // Only grab element nodes
				var str = n[i].getElementsByTagName("Struct"); // Get Each Structure in Network n[i]
				if (str.length<3) continue; // Script gets weird if we only have 2 nodes. I don't really care that much so just skip those.
				var pip = n[i].getElementsByTagName("Pipe");   // Get Each Structure in Network n[i]
				var strLen = str.length;
				var pipLen = pip.length;
				var cens = []; 				// So we can compare with the previous center
				var del  = []; 				// So we can keep track of what to delete
				var pipCh = []; 		    // So we can keep track of which Pipes to change
				var pipRem = [];			// So we can keep track of which Pipes to remove
				var strAppend = []; 		// So we can remember which Structure we Appended to
				var strRemove = []; 		// So we can remember which Structure we Removed
				var index = [];				// So we can detect sequentially removed structures
				for (var j = 0; j<strLen; j++){ 						// Get info from each structure
					var cen = str[j].getElementsByTagName("Center")[0].childNodes[0]; 			// Center of current Str
					cens.push(cen.nodeValue); 													// Build Center Array
					if (j == 0) continue;														// Skip first iteration
					var x0 = cens[j-1].split(" ")[0];		var x1 = cens[j].split(" ")[0];		// Get x's
					var y0 = cens[j-1].split(" ")[1];		var y1 = cens[j].split(" ")[1];		// Get y's
					var dx = x1 - x0;
					var dy = y1 - y0;
					var d  = Math.sqrt(dx*dx+dy*dy);
					//console.log(d<=dist);
					if ((x0 == 0)||(y0 == 0)||(x1 == 0)||(y1 == 0)){													// Skip pipes being randomly at 0,0 (it happens to me because i am a disaster)
						continue;
						}
					if (d<=dist){ 									// If close, merge the two structures into one
						var inv0 = str[j-1].getElementsByTagName("Invert");						// Invert objects 	of pipe to append
						var inv1 = str[j].getElementsByTagName("Invert")						// Invert objects 	of pipe to remove
						if (inv1.length==0) alert("FUCK"); else
						var clone = inv1[0].cloneNode(true);									// Clone
						var kk = 0;
						var ll = 0;
						//if (i==1) console.log("str=" + str[j].attributes.getNamedItem("name").nodeValue + " klen=" + inv0.length + " lLen=" +  inv1.length);
						/*if (((inv0.length==1)&&(inv1.length==2))||((inv0.length==2)&&(inv1.length==1))){ // Ending structures
							continue;
							console.log(j);
							}*/
						if (((inv0.length==2)&&(inv1.length==2))||((inv0.length==1)&&(inv1.length==1))) // Skip weird structures
						for (var k=0; k<inv0.length; k++){
							for (var l=0; l<inv1.length; l++){
								//if (i==1) console.log("str=" + str[j].attributes.getNamedItem("name").nodeValue + " k=" + k + " l=" + l + " klen=" + inv0.length + " lLen=" +  inv1.length);
								var ref0 = inv0[k].attributes.getNamedItem("refPipe").nodeValue;
								var ref1 = inv1[l].attributes.getNamedItem("refPipe").nodeValue;
								if (ref0 == ref1){
									pipRem.push(ref0);
									kk = Math.abs(k-1);
									ll = Math.abs(l-1);
									}
								}
							}
							else {console.log("SKIPPED " + str[j].attributes.getNamedItem("name").nodeValue + " BECAUSE inv0=" + inv0.length + " inv1=" + inv1.length); continue;}
						var refPipe0 = inv0[kk].attributes.getNamedItem("refPipe").nodeValue; 		// Ref pipe    of str  to append
						var refPipe1 = inv1[ll].attributes.getNamedItem("refPipe").nodeValue; 		// Ref pipe    of str  to remove
						str[j-1].appendChild(clone);												// Do the appending
						del.push(j);															// Record which str to 	remove. Can't do it here cuz it'd mess up the order..
						index.push(j);															// Record the index which is the same as above but i need this code to be readable, dammit!!
						pipCh.push(refPipe1);													// Record which pipe to change later
						strAppend.push(str[j-1]);												// Record which str we  appended
						strRemove.push(str[j]);													// Record which str we  removed
						}
					}
				for (var j = 0; j<del.length; j++){						// Loop thru and delete strutures
					var q = del[j]-j;									// Deal with the changing number as we delete
					str[q].parentNode.removeChild(str[q]);				// Do the actual removing
					tot++;
					console.log("DELETED " + str[q].attributes.getNamedItem("name").nodeValue + " TOTAL " + tot);
					}
				for (var j = 0; j<pipLen; j++){							// Loop thru and change pipes
					var att = pip[j].attributes;						// Get attributes 	of each pipe
					var nam = att.getNamedItem("name");					// Get name 		of each pipe
					var refStart = att.getNamedItem("refStart");		// Get refStart		of each pipe
					var refEnd   = att.getNamedItem("refEnd");			// Get refEnd		of each pipe
					for (var k = 0; k<pipCh.length; k++){				// Check each pipe against the each in the change list
						if (pipCh[k] == nam.nodeValue){					// Match found
								var q = 1								
								while (q >= 0){							// Up late getting this to work. It finally does. I'll comment it later. I'm going home.
									var di = index[k+q] - index[k+q-1];
									if (di == 1){
										strAppend[k+q].attributes.getNamedItem("name").nodeValue = strAppend[k].attributes.getNamedItem("name").nodeValue;
										q++
										}
									else break;
									}
									var appNam = strAppend[k].attributes.getNamedItem("name").nodeValue;		// Name of appended structure
									var remNam = strRemove[k].attributes.getNamedItem("name").nodeValue;		// Name of removed structure
							if  (refStart.nodeValue == remNam)			// Is the removed one the start?
								refStart.nodeValue = appNam;			// Then change it to the appended one
							 if (refEnd.nodeValue == remNam)			// Is the removed one the end?
								refEnd.nodeValue = appNam;				// Then change it to the appended one
							}											// I should really learn how to write intelligent comments...
						}
					}
				for (var j = 0; j<pipLen; j++){							// Loop thru and remove pipes
					var att = pip[j].attributes;						// Get attributes 	of each pipe
					var nam = att.getNamedItem("name");					// Get name 		of each pipe
					for (var k = 0; k<pipRem.length; k++){				// Check each pipe against the each in the change list
						if (pipRem[k] == nam.nodeValue){
							pip[j].parentNode.removeChild(pip[j]);
							pipLen--;
							j--;
							}
						}
					}
				}
			}
		displayXML(s.serializeToString(xmlDoc));
		popFields(xmlDoc);
		}

	// Edit the DOM before passing back to the parse function	
	function popFields(doc){
		x = doc.getElementsByTagName("PipeNetwork");
		xLen = x.length;
		clearFields();
		for (var i = 0; i <xLen; i++){
			if (x[i].nodeType == 1){
				var labels = [];
				var values = [];
				var net = x[i].attributes.getNamedItem("name").nodeValue;
				var y = x[i].getElementsByTagName("CircPipe");
				if (y[0] == undefined)
				var y = x[i].getElementsByTagName("RectPipe");
				var attr = y[0].attributes
				labels.push("Network");
				values.push(net);
				for (var j = attr.length-1; j>-1; j--){
					var nam = y[0].attributes[j].name;
					var val = y[0].attributes[j].nodeValue;
					labels.push(nam);
					values.push(val);
					}
				addField(labels,values);
				}
			}
		}

	// Clear the fields 
	function clearFields(){
		var container = document.getElementById("container");
		var numSubs = container.childNodes.length;
		for (var i=0 ; i<numSubs; i++){
			container.firstChild.remove();
			}
		}

	// Add a row of fields
	function addField(labels,values){
		if (labels.length != values.length) alert("#labels doesn't equal #values!"); // hey look an error message
		var container = document.getElementById("container");
		subcontainer = document.createElement("div");
		container.appendChild(subcontainer);
		var butt = subcontainer.appendChild(document.createElement("button"));
		var buttText = butt.appendChild(document.createTextNode("Circ/Rect"));
		//var butt2 = subcontainer.appendChild(document.createElement("button"));
		//var buttText2 = butt2.appendChild(document.createTextNode("Simplify"));
		butt.id = values[0] + "_Button"
		//butt2.id = values[0] + "_ButtonSimp"
		butt.onclick =  function(){changePipe(values[0])};
		//butt2.onclick = function(){simplify(values[0])};
		for(var i=0; i<labels.length; i++){
		addFieldElement(labels[i],values[i],values[0])}
		}

	// Change Pipe Network Type within the DOM
	function changePipe(id){
		var ns = xmlDoc.lookupNamespaceURI(null); // gotta make elements in the right namespace
		var s = new XMLSerializer();
		var x = xmlDoc.getElementsByTagName("PipeNetwork");
		var xLen = x.length;
		for (var i = 0; i <xLen; i++){ // Loop thru Pipe Networks
			if ((x[i].nodeType == 1) && (x[i].attributes.getNamedItem("name").nodeValue == id)){ // Filter out all NETWORKS except the one with name == id
				var y = x[i].getElementsByTagName("Pipe"); // Get Each Pipe in Network x[i]
				var z = [];
				var yLen = y.length;
				for (j = 0; j<yLen; j++){   									// I can't get renameNodes() working, so we gotta do it like this.
					z[j] = y[j].childNodes[1];  								// Get the Circ/Rect Pipe from Each Pipe
					if (z[j].nodeName == "CircPipe")							// 	If Circ Pipe...
						var newPipe = xmlDoc.createElementNS(ns,"RectPipe"); 	// 					...Then make a new Rect Pipe Node (in the current namespace)
					else if (z[0].nodeName == "RectPipe")						// 	If Rect Pipe...
						var newPipe = xmlDoc.createElementNS(ns,"CircPipe"); 	// 					..Then make a new Circ Pipe Node
					else alert("Error: only currently accepting Circular and Rectangular Pipes"); // Look at me! Writing another error code.
					var attr = z[j].attributes; 																			// Get the attributes for the Circ/Rect Pipe
					var flag = 0; 																							// Flag used to not change dia to ht/wt and then back again
					for (var k = 0; k<attr.length; k++){
						if ((attr[k].nodeName == "diameter") && (flag != "hw")) {											// Don't copy the diameter attribute, instead copy blank ht/wt
							newPipe.setAttribute("height","");
							newPipe.setAttribute("width","");
							flag = "d";																						// Flag this pipe as having originally been circular
							continue;																						// Slight optimization
							}
						if (((attr[k].nodeName == "height") || (attr[k].nodeName == "width")) && (flag != "d")){			// Don't copy the height/width attribute, instead copy blank dia
							newPipe.setAttribute("diameter","");
							flag = "hw";																					// Flag this pipe as having originally been rectangular
							continue;
							}
						newPipe.setAttribute(attr[k].nodeName,attr[k].nodeValue); 											// Set attribute values
						}
					y[j].replaceChild(newPipe,z[j]);																		// Replace the Circ/Rect Pipe with the new Pipe Node
					}
				}
			}
		displayXML(s.serializeToString(xmlDoc));
		popFields(xmlDoc);
		}

	// Simplify Network
	function simplify(){
		alert("Oh, not in cruelty, not in wrath, The Reaper came that day; 'T was an angel visited the green earth, And took the flowers away.");
		var foo = document.getElementById("precSimp").value;
		mergeNodes(foo);
		}

	// Go thru and remove nodes, edit others so that it all still works
	function removeNodes(id,nodes){
		var s = new XMLSerializer();
		var n = xmlDoc.getElementsByTagName("PipeNetwork");
		var nLen = n.length;
		for (var i = 0; i <nLen; i++){ // Loop thru Pipe Networks
			if ((n[i].nodeType == 1) && (n[i].attributes.getNamedItem("name").nodeValue == id)){ // Filter out all NETWORKS except the one with name == id
				var p = n[i].getElementsByTagName("Pipe"); // Get Each Pipe in Network n[i]
				var s = n[i].getElementsByTagName("Structures"); // Get Each Structure in Network 
				var z = [];
				var pLen = p.length;
				for (j = 0; j<pLen; j++){
					
					}
				}
			}
		}

	// Add a single text box with a label
	function addFieldElement(n,e,id){
		var txt = n + ": ";
		var input = document.createElement("input");
		input.id = id + "_" + n;
		input.value = e;
		input.className = "inputClass";
		input.onchange = function(){editXML(id,n);};
		subsubcontainer = subcontainer.appendChild(document.createElement("div"));
		subsubcontainer.className = "myclass";
		subsubcontainer.appendChild(document.createTextNode(txt));
		subsubcontainer.appendChild(input);
		}
		
	// Dynamically Edit DOM
	function editXML(id,n){
		var s = new XMLSerializer();
		var x = xmlDoc.getElementsByTagName("PipeNetwork");
		var xLen = x.length;
		var inputID = id + "_" + n;
		var inp = document.getElementById(inputID);
		var val = inp.value;
		for (var i = 0; i <xLen; i++){
			loopIF:
			if ((x[i].nodeType == 1) && (x[i].attributes.getNamedItem("name").nodeValue == id)){
				if (n == "Network"){
					x[i].attributes.getNamedItem("name").nodeValue=inp.value;
					break;
					}
				var y = x[i].getElementsByTagName("CircPipe");
				if (y[0] == undefined)
				var y = x[i].getElementsByTagName("RectPipe");
				for(var j=0; j<y.length; j++){
					y[j].attributes.getNamedItem(n).nodeValue=val;
					}
				break loopIF;
				}
			}
		displayXML(s.serializeToString(xmlDoc));
		popFields(xmlDoc);
		}

	// Pass finished XML data to textArea
	function displayXML(str){
		var str = str.replaceAll("&","&amp;");
		document.getElementById("xml-val").innerHTML = str;
		}

	// Pass finished CSV data to textArea
	function displayCSV(str){
		var str = str.replaceAll("<br>","\n");
		document.getElementById("csv-val").innerHTML = str;
		}

	// Pass info to downloader
	function download(filename, text){
		var text = document.getElementById(text).value;
		var element = document.createElement('a');
		element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
		element.setAttribute('download', filename);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		}


</script>

<br><br><br><br><br><br><br><br><br><br><br><br><br>

</body>
</html>
